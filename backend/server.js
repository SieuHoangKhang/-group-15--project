// server.js
const express = require('express');
const cors = require('cors');
const path = require('path');
const app = express();
const mongoose = require('mongoose'); // TH√äM: Mongoose ƒë·ªÉ k·∫øt n·ªëi MongoDB
require('dotenv').config();

// --- Middleware & C·∫•u h√¨nh ---
app.use(express.json());
// Cho ph√©p CORS t·ª´ localhost/127.0.0.1 tr√™n m·ªçi c·ªïng (ph·ª•c v·ª• dev)
app.use(cors({
  origin: (origin, callback) => {
    // Cho ph√©p request kh√¥ng c√≥ origin (curl, Postman)
    if (!origin) return callback(null, true);
    const allow = /^http:\/\/(localhost|127\.0\.0\.1)(:\d+)?$/i.test(origin);
    if (allow) return callback(null, true);
    // N·∫øu b·∫°n ƒëang debug l·ªói CORS, b·∫°n c√≥ th·ªÉ t·∫°m th·ªùi comment d√≤ng d∆∞·ªõi
    return callback(new Error('Not allowed by CORS'));
  },
  methods: ['GET','POST','PUT','DELETE','OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// Import routes
const userRouter = require('./routes/user');
// Theo y√™u c·∫ßu b√†i: endpoint l√† /users (kh√¥ng c√≥ prefix /api)
app.use('/', userRouter);

// Ph·ª•c v·ª• static frontend build (m·ªôt c·ªïng duy nh·∫•t)
// Th∆∞ m·ª•c frontend n·∫±m c·∫°nh backend: ../frontend/build
const frontendBuildPath = path.join(__dirname, '..', 'frontend', 'build');
app.use(express.static(frontendBuildPath));
// Catch-all: tr·∫£ v·ªÅ index.html cho m·ªçi route KH√îNG b·∫Øt ƒë·∫ßu b·∫±ng /api (Express 5 d√πng regex)
// Catch-all cho SPA (lo·∫°i tr·ª´ /users n·∫øu mu·ªën, nh∆∞ng do route ƒë√£ ƒë·∫∑t tr∆∞·ªõc n√™n kh√¥ng b·∫Øt v√†o /users)
app.get(/^\/(?!api).*/, (req, res) => {
  return res.sendFile(path.join(frontendBuildPath, 'index.html'));
});

// Route g·ªëc s·∫Ω ƒë∆∞·ª£c file index.html x·ª≠ l√Ω SPA, kh√¥ng c·∫ßn tr·∫£ text ri√™ng

// Khai b√°o c·ªïng
const PORT = process.env.PORT || 3000;
// --- Logic K·∫øt n·ªëi MongoDB v√† Kh·ªüi ƒë·ªông Server ---
const connectDB = async () => {
  try {
    // L·∫•y chu·ªói k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng MONGO_URI
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ MongoDB connected successfully!');
    
    // Kh·ªüi ƒë·ªông server CH·ªà KHI k·∫øt n·ªëi database th√†nh c√¥ng
    app.listen(PORT, () => {
      console.log(`üöÄ Server ƒëang ch·∫°y ·ªü c·ªïng ${PORT}`);
    });

  } catch (error) {
    console.error('‚ùå MongoDB connection failed:', error.message);
    console.error('L·ªói: H√£y ki·ªÉm tra MONGO_URI trong file .env');
    process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
  }
};

// K·∫øt n·ªëi MongoDB v√† kh·ªüi ƒë·ªông server
// G·ªçi h√†m k·∫øt n·ªëi database
connectDB();

// (X√≥a ph·∫ßn app.listen c≈© ·ªü cu·ªëi file)
